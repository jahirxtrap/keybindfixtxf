plugins {
    id 'java'
    id 'idea'
    id 'fabric-loom' version '1.5-SNAPSHOT'
}

version = "${version}"
base.archivesName = mod_id

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
}

loom {
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

def resourceTargets = ['fabric.mod.json']
def replaceProperties = [
    mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: version,
    mod_author: mod_author, mod_description: mod_description,
    mod_url: mod_url, mod_issues: mod_issues, side: fabric_side
]

processResources {
    inputs.properties replaceProperties
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

jar {
    manifest {
        attributes([
            'Specification-Title'     : mod_name,
            'Specification-Vendor'    : mod_author,
            'Specification-Version'   : project.jar.archiveVersion,
            'Implementation-Title'    : project.name,
            'Implementation-Version'  : project.jar.archiveVersion,
            'Implementation-Vendor'   : mod_author,
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Timestamp'               : System.currentTimeMillis(),
            'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            'Built-On-Minecraft'      : minecraft_version
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

jar.finalizedBy('remapJar')